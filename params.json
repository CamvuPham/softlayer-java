{
  "name": "Softlayer-java",
  "tagline": "SoftLayer API Client for Java",
  "body": "# SoftLayer API Client for Java\r\n\r\n[![Build Status](https://travis-ci.org/softlayer/softlayer-java.svg)](https://travis-ci.org/softlayer/softlayer-java)\r\n\r\n## Introduction\r\n\r\nThis library provides a JVM client for the [SoftLayer API](http://sldn.softlayer.com/article/SoftLayer-API-Overview). It\r\nhas code generated and compiled via Maven. The client can work with any Java 6+ runtime. It uses the code generation\r\nproject in `gen/` to generate the service and type related code. Although likely to work in resource-constrained\r\nenvironments (i.e. Android, J2ME, etc), using this is not recommended; Use the\r\n[REST](http://sldn.softlayer.com/article/REST) API instead.\r\n\r\nBy default the HTTP client is the Java `HttpUrlConnection` and the JSON marshalling is done by\r\n[Gson](https://code.google.com/p/google-gson/). Both of these pieces can be exchanged for alternative implementations\r\n(see below).\r\n\r\nThe `examples/` project has sample uses of the API. It can be executed from Maven while inside the `examples/` folder\r\nvia a command:\r\n\r\n    mvn -q compile exec:java -Dexec.args=\"EXAMPLE_NAME API_USER API_KEY\"\r\n\r\nWhere `EXAMPLE_NAME` is the unqualified class name of an example in the `com.softlayer.api.example` package (e.g.\r\n`ListServers`), `API_USER` is your API username, and `API_KEY` is your API key. NOTE: Some examples order virtual\r\nservers and may charge your account.\r\n\r\n## Using\r\n\r\nTo add the project you your Maven project, add the dependency:\r\n\r\n```xml\r\n<dependency>\r\n  <groupId>com.softlayer.api</groupId>\r\n  <artifactId>softlayer-api-client</artifactId>\r\n  <version>0.2.3</version>\r\n</dependency>\r\n```\r\n\r\nNote, the client published to Maven is built upon version change of this project. It will contain the generated\r\nartifacts as of that time only. See \"Building\" for more information on how to regenerate the artifacts to get regular\r\nadditions to the SoftLayer API.\r\n\r\n### Creating a Client\r\n\r\nAll clients are instances of `ApiClient`. Currently there is only one implementation, the `RestApiClient`. Simply\r\ninstantiate it and provide your credentials:\r\n\r\n```java\r\nimport com.softlayer.api.*;\r\n\r\nApiClient client = new RestApiClient().withCredentials(\"my user\", \"my api key\");\r\n```\r\n\r\nIf the end point isn't at the normal SoftLayer API, you can provide the prefix to the constructor of the\r\n`RestApiClient`. By default it is set to `https://api.softlayer.com/rest/v3.1/`.\r\n\r\n### Making API Calls\r\n\r\nOnce a client is created, it can be used to access services. There are hundreds of services to control your SoftLayer\r\naccount. A simple one is the `Account` service. Here's a call to get all of the hardware on the account:\r\n\r\n```java\r\nimport com.softlayer.api.service.Account;\r\nimport com.softlayer.api.service.Hardware;\r\n\r\nfor (Hardware hardware : Account.service(client).getHardware()) {\r\n    System.out.println(\"Hardware: \" + hardware.getFullyQualifiedDomainName());\r\n}\r\n```\r\n\r\nSome calls on a service require an ID to know what object to act on. This can be obtained by passing in the numeric ID\r\ninto the `service` method or by calling `asService` on an object that has an ID. Here's an example of soft-rebooting a\r\nvirtual server with \"reboot-test\" as the hostname:\r\n\r\n```java\r\nimport com.softlayer.api.service.virtual.Guest;\r\n\r\nfor (Guest guest : Account.service(client).getVirtualGuests()) {\r\n    if (\"reboot-test\".equals(guest.getHostname())) {\r\n        guest.asService(client).rebootSoft();\r\n    }\r\n}\r\n```\r\n\r\nSome calls require sending in data. This is done by just instantiating the object and populating the data. Here's an\r\nexample of ordering a new virtual server: (Note running this can charge your account)\r\n\r\n```java\r\nimport com.softlayer.api.service.virtual.Guest;\r\n\r\nGuest guest = new Guest();\r\nguest.setHostname(\"myhostname\");\r\nguest.setDomain(\"example.com\");\r\nguest.setStartCpus(1);\r\nguest.setMaxMemory(1024);\r\nguest.setHourlyBillingFlag(true);\r\nguest.setOperatingSystemReferenceCode(\"UBUNTU_LATEST\");\r\nguest.setLocalDiskFlag(false);\r\nguest.setDatacenter(new Location());\r\nguest.getDatacenter().setName(\"dal05\");\r\nguest = Guest.service(client).createObject(guest);\r\nSystem.out.println(\"Virtual server ordered with ID: \" + guest.getId());\r\n```\r\n\r\n### Using Object Masks\r\n\r\nObject masks are a great way to reduce the number of API calls to traverse the data graph of an object. For example,\r\nhere's how by just asking for an account, you can retrieve all your VLANs, their datacenter, and the firewall rules that\r\nare on them:\r\n\r\n```java\r\nimport com.softlayer.api.service.Account;\r\nimport com.softlayer.api.service.network.Vlan;\r\nimport com.softlayer.api.service.network.vlan.firewall.Rule;\r\n\r\nAccount.Service service = Account.service(client);\r\nservice.withMask().networkVlans().vlanNumber();\r\nservice.withMask().networkVlans().primaryRouter().datacenter().longName();\r\nservice.withMask().networkVlans().firewallRules().\r\n    orderValue().\r\n    sourceIpAddress().\r\n    sourceIpCidr();\r\n\r\nfor (Vlan vlan : service.getObject().getNetworkVlans()) {\r\n    for (Rule rule : vlan.getFirewallRules()) {\r\n        System.out.format(\"Rule %d on VLAN %d in %s has some restriction on subnet %s/%d\\n\",\r\n            rule.getOrderValue(), vlan.getVlanNumber(),\r\n            vlan.getPrimaryRouter().getDatacenter().getLongName(),\r\n            rule.getSourceIpAddress(), rule.getSourceIpCidr());\r\n    }\r\n}\r\n```\r\n\r\nAll values of a type can be masked upon. If a value represents a primitive or collection of primitives, the same mask\r\nit is called on is returned. Otherwise the mask of the other type is given. These translate into SoftLayer's\r\n[string-based object mask format](http://sldn.softlayer.com/article/Object-Masks). A string or an instance of a mask\r\ncan be given directly by calling `setMask` on the service. Note, when object masks are added on a service object, they\r\nwill be sent with every service call unless removed via `clearMask` or overwritten via `withNewMask` or `setMask`.\r\n\r\n### Asynchronous Invocation\r\n\r\nAll services also provide an asynchronous interface. This can be obtained from a service by calling `asAsync`. Here's an\r\nexample of getting all top level billing items and listing when they were created:\r\n\r\n```java\r\nimport java.util.List;\r\nimport com.softlayer.api.service.ResponseHandler;\r\nimport com.softlayer.api.service.Account;\r\nimport com.softlayer.api.service.billing.Item;\r\n\r\nAccount.service(client).asAsync().getAllTopLevelBillingItems(new ResponseHandler<List<Item>>() {\r\n    @Override\r\n    public void onError(Exception ex) {\r\n        ex.printStackTrace();\r\n    }\r\n\r\n    @Override\r\n    public void onSuccess(List<Item> items) {\r\n        for (Item item : items) {\r\n            System.out.format(\"Billing item %s created on %s\\n\", item.getDescription(), item.getCreateDate());\r\n        }\r\n    }\r\n}).get();\r\n```\r\n\r\nUsing the default HTTP client, this runs the call in a separate thread and calls the handler parameter upon completion.\r\nThe `get` at the end basically makes it wait forever so the application doesn't exit out from under us. With the default\r\nHTTP client the asynchronous invocations are handled by a simple thread pool that defaults to a cached thread pool that\r\ncreates daemon threads. It can be changed:\r\n\r\n```java\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ExecutorService;\r\nimport com.softlayer.api.service.RestApiClient;\r\nimport com.softlayer.api.service.http.ThreadPoolHttpClientFactory;\r\nimport com.softlayer.api.service.billing.Item;\r\n\r\nRestApiClient client = new RestApiClient();\r\nExecutorService threadPool = Executors.newFixedThreadPool(3);\r\n((ThreadPoolHttpClientFactory) client.getHttpClientFactory()).setThreadPool(threadPool);\r\n```\r\n\r\nUnlike using the default thread pool, you will be responsible for shutting down this overridden thread pool as\r\nnecessary. Other HTTP client implementations may handle asynchrony differently and not use thread pools at all.\r\n\r\nIn addition to the callback-style above, can also get the response as a `Future`. Here's an example of waiting 10\r\nseconds to get all top level billing items:\r\n\r\n```java\r\nimport java.util.List;\r\nimport java.util.concurrent.TimeUnit;\r\nimport java.util.concurrent.Future;\r\nimport com.softlayer.api.service.Account;\r\nimport com.softlayer.api.service.billing.Item;\r\n\r\nFuture<List<Item>> response = Account.service(client).asAsync().getAllTopLevelBillingItems();\r\nList<Item> items = response.get(10, TimeUnit.SECONDS);\r\nfor (Item item : items) {\r\n    System.out.format(\"Billing item %s created on %s\\n\", item.getDescription(), item.getCreateDate());\r\n}\r\n```\r\n\r\n### Thread Safety\r\n\r\nNo class in this library is guaranteed to be thread-safe. Callers are expected to keep this in mind when developing\r\nwith the library and to never use the same `ApiClient` (or any other object created with it) concurrently across\r\nthreads.\r\n\r\n### Pagination\r\n\r\nSometimes there is a need to get the responses from the SoftLayer API in a paginated way instead of all at once. This\r\ncan be done by utilizing result limits. A result limit can be passed in with the number of results requested and the\r\noffset to start reading from. Requesting smaller amounts of data will increase the performance of the call. Here is an\r\nexample of obtaining the first 10 tickets and outputting the total:\r\n\r\n```java\r\nimport com.softlayer.api.ResultLimit;\r\nimport com.softlayer.api.service.Account;\r\nimport com.softlayer.api.service.Ticket;\r\n\r\nAccount.Service service = Account.service(client);\r\nservice.setResultLimit(new ResultLimit(10));\r\nfor (Ticket ticket : service.getTickets()) {\r\n    System.out.println(\"Got ticket \" + ticket.getTitle());\r\n}\r\nSystem.out.println(\"Total tickets on the account: \" + service.getLastResponseTotalItemCount());\r\n```\r\n\r\nThe services are not guaranteed to be thread-safe on their own, so it is difficult to obtain the total with\r\n`getLastResponseTotalItemCount` when using the service asynchronously. To assist with this when using the callback\r\nstyle, the `ResponseHandlerWithHeaders` can be used instead of `ResponseHandler`. But the safest way is to only use a\r\nsingle service per thread.\r\n\r\n### Differences from the API\r\n\r\nDue to restrictions on identifiers in Java, some properties, methods, classes, and packages will be named differently\r\nfrom the naming used by the API. For example, an API property that starts with a number will be prepended with 'z'.\r\n[Java keywords](https://docs.oracle.com/javase/specs/jls/se8/html/jls-3.html#jls-3.9) that appear in identifiers may\r\nalso be replaced.\r\n\r\n## Building\r\n\r\nThis project is intentionally provided without all of the service code. Normal Maven `install` and `package` commands\r\nwork properly and will regenerate the client. To specifically regenerate the Java service-related files, run:\r\n\r\n    mvn generate-sources\r\n\r\n## Customization\r\n\r\n### Logging\r\n\r\nLogging the requests and response to stdout can be enabled by invoking `withLoggingEnabled` on the `RestApiClient`. In\r\norder to log elsewhere, simply make your own implementation of `RestApiClient` with `logRequest` and `logResponse`\r\noverridden.\r\n\r\n### HTTP Client\r\n\r\nThe default HTTP client that is used is the JVM's native `HttpUrlConnection`. In order to create your own, alternative\r\nimplementation you must implement `com.softlayer.api.http.HttpClientFactory`. Once implemented, this can be explicitly\r\nset on the `RestApiClient` by calling `setHttpClientFactory`. Instead of setting the factory manually, you can also\r\nleverage Java's `ServiceLoader` mechanism to have it used by default. This involves adding the fully qualified class\r\nname of your implementation on a single line in a file in the JAR at\r\n`META-INF/com.softlayer.api.http.HttpClientFactory`.\r\n\r\n### JSON Marshalling\r\n\r\nThe default JSON marshaller that is used is [Gson](https://code.google.com/p/google-gson/). In order to create your own,\r\nalternative implementation you must implement `com.softlayer.api.json.JsonMarshallerFactyory`. Once implemented, this\r\ncan be explicitly set on the `RestApiClient` by calling `setJsonMarshallerFactory`. Instead of setting the factory\r\nmanually, you can also leverage Java's `ServiceLoader` mechanism to have it used by default. This involves adding the\r\nfully qualified class name of your implementation on a single line in a file in the JAR at\r\n`META-INF/com.softlayer.api.json.JsonMarshallerFactory`.\r\n\r\n## Copyright\r\n\r\nThis software is Copyright (c) 2016 The SoftLayer Developer Network. See the bundled LICENSE file for more information.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}